'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var buttons = document.querySelectorAll('button');

if (buttons) {
  for (var i = 0; i < buttons.length; i++) {
    buttons[i].addEventListener('mouseup', function () {
      this.blur();
    });
  }
}

;

var getResource = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {
    var res;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fetch(url);

          case 2:
            res = _context.sent;

            if (res.ok) {
              _context.next = 5;
              break;
            }

            throw new Error("Could not fetch ".concat(url, ", status: ").concat(res.status));

          case 5:
            _context.next = 7;
            return res.json();

          case 7:
            return _context.abrupt("return", _context.sent);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getResource(_x) {
    return _ref.apply(this, arguments);
  };
}();

;
window.addEventListener("DOMContentLoaded", function () {
  var banner = document.querySelector(".banner");

  var Header = /*#__PURE__*/function () {
    function Header(header_link_right) {
      _classCallCheck(this, Header);

      this.header_link_right = header_link_right;
    }

    _createClass(Header, [{
      key: "render",
      value: function render() {
        var bannerTopLink = document.querySelector(".banner__top-link");
        bannerTopLink.textContent = "\n      ".concat(this.header_link_right, "\n        ");
      }
    }]);

    return Header;
  }();

  var Banner = /*#__PURE__*/function () {
    function Banner(title, features_item_1, features_item_2, features_item_3, btn, note) {
      _classCallCheck(this, Banner);

      this.title = title;
      this.features_item_1 = features_item_1;
      this.features_item_2 = features_item_2;
      this.features_item_3 = features_item_3;
      this.btn = btn;
      this.note = note;
      this.parent = document.querySelector(".banner");
    }

    _createClass(Banner, [{
      key: "render",
      value: function render() {
        var content = document.createElement("section");
        content.classList.add("banner__content", "content");
        content.innerHTML = "\n      <h1 class=\"content__title\">\n        ".concat(this.title, "\n      </h1>\n      <ul class=\"content__features features list-reset\">\n        <li class=\"features__item\">\n          <img class=\"features__icon\" src=\"static/img/icon/unlimitedDocs.svg\" alt=\"\">\n          <span class=\"features__caption\">").concat(this.features_item_1, "</span>\n        </li>\n        <li class=\"features__item\">\n          <img class=\"features__icon\" src=\"static/img/icon/export.svg\" alt=\"\">\n          <span class=\"features__caption\">").concat(this.features_item_2, "</span>\n        </li>\n        <li class=\"features__item\">\n          <img class=\"features__icon\" src=\"static/img/icon/noAds.svg\" alt=\"\">\n          <span class=\"features__caption\">").concat(this.features_item_3, "</span>\n        </li>\n      </ul>\n\n      <div class=\"content__subscription subscription\">\n        <div class=\"subscription__cards\">\n          <button class=\"subscription__card card card--active\" data-url='https://apple.com/'>\n          </button>\n          <button class=\"subscription__card card\" data-url='https://google.com/'>\n          </button>\n        </div>\n        <a class=\"subscription__btn\" href=\"#\">").concat(this.btn, "</a>\n        <p class=\"subscription__note\">").concat(this.note, "</p>\n      </div>\n        ");
        banner.append(content);
      }
    }]);

    return Banner;
  }();

  var Footer = /*#__PURE__*/function () {
    function Footer(footer_link_left, privacy_policy) {
      _classCallCheck(this, Footer);

      this.footer_link_left = footer_link_left;
      this.privacy_policy = privacy_policy;
    }

    _createClass(Footer, [{
      key: "render",
      value: function render() {
        var footer = document.createElement("footer");
        footer.classList.add("banner__footer", "footer");
        footer.innerHTML = "\n      <a class=\"footer__link\" href=\"#\">".concat(this.footer_link_left, "</a>\n      <a class=\"footer__link\" href=\"#\">").concat(this.privacy_policy, "</a>\n        ");
        banner.append(footer);
      }
    }]);

    return Footer;
  }();

  var Card = /*#__PURE__*/function () {
    function Card(sale, name, cost, term, peculiarity, monthlyCost) {
      _classCallCheck(this, Card);

      this.sale = sale;
      this.name = name;
      this.cost = cost;
      this.term = term;
      this.peculiarity = peculiarity;
      this.monthlyCost = monthlyCost;
      this.parent = document.querySelector(".subscription__cards");
    }

    _createClass(Card, [{
      key: "render",
      value: function render() {
        var card = document.querySelector(".card");
        card.innerHTML = "\n        <p class=\"card__name\">".concat(this.name, "</p>\n        <p class=\"card__cost\">").concat(this.cost, "</p>\n        <p class=\"card__term\">").concat(this.term, "</p>\n        <p class=\"card__peculiarity\">").concat(this.peculiarity, "</p>\n        <p class=\"card__monthly-cost\">").concat(this.monthlyCost, "</p>\n        ");
        var sale = document.createElement("span");
        sale.classList.add("card__sale");
        sale.innerHTML = "".concat(this.sale);

        if (this.sale !== undefined) {
          card.prepend(sale);
          card.classList.add("card--sale");
        }

        this.parent.append(card);
      }
    }]);

    return Card;
  }();

  var generateBanner = function generateBanner(object) {
    new Header(object.header_link_right).render();
    new Banner(object.title, object.features_item_1, object.features_item_2, object.features_item_3, object.btn, object.note).render();
    new Footer(object.footer_link_left, object.privacy_policy).render();
    object.card.forEach(function (obj) {
      new Card(obj.sale, obj.name, obj.cost, obj.term, obj.peculiarity, obj.monthlyCost).render();
    });
  }; //////////////////////////////////////


  var urlLanguage = new URLSearchParams(window.location.search.slice(1));
  var language = window.navigator.language;
  var lang = urlLanguage.get("lang") || language.slice(0, 2);

  var changeHtmlLang = function changeHtmlLang(lang) {
    document.documentElement.lang = lang;
  };

  var changeLang = function changeLang(lang) {
    getResource("static/data/".concat(lang, ".json")).then(function (data) {
      generateBanner(data);
      changeHtmlLang(lang);
    });
  };

  var checkLang = function checkLang(lang) {
    var languages = ["ru", "fr", "en", "es", "ja", "nl", "zh"];

    if (languages.includes(lang)) {
      changeLang(lang);
      return;
    }

    changeLang("en");
  };

  checkLang(lang);
  banner.addEventListener("click", function (evt) {
    if (evt.target.classList.contains("btn")) {
      var btns = document.querySelectorAll(".btn");
      btns.forEach(function (btn) {
        btn.classList.remove("btn--active");
      });
      evt.target.classList.add("btn--active");
    }
  });
  banner.addEventListener("click", function (evt) {
    if (evt.target.classList.contains("card")) {
      var btns = banner.querySelectorAll(".card");
      btns.forEach(function (btn) {
        btn.classList.remove("card--active");
      });
      evt.target.classList.add("card--active");
      var dataUrl = evt.target.getAttribute("data-url");
      banner.querySelector(".subscription__btn").setAttribute("href", dataUrl);
    }
  });
});
;